{{- $appname := .Values.global.name -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $appname }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ $appname | quote }}
  annotations:
    esMajorVersion: {{ .Values.global.esVersion | quote }}
spec:
  serviceName: {{ .Values.deployment.serviceName }}
  selector:
    matchLabels:
      app: {{ $appname | quote }}
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: {{ $appname }}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.deployment.volumeClaimTemplates.storage }}
      storageClassName: {{ .Values.deployment.volumeClaimTemplates.storageClassName }}
  template:
    metadata:
      name: {{ $appname | quote }}
      labels:
        app: {{ $appname | quote }}
      annotations:
        {}
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 120
      enableServiceLinks: true
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: {{ .Values.deployment.containers.images }}
        imagePullPolicy: "IfNotPresent"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        resources:
          limits:
            cpu: 25m
            memory: 128Mi
          requests:
            cpu: 25m
            memory: 128Mi

      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: {{ .Values.deployment.containers.images }}
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                set -e
                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  if [ -n "${ELASTIC_PASSWORD}" ]; then
                    set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"
                  fi

                  curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "7" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          requests:
            cpu: {{ .Values.deployment.containers.resources.requests.cpu | quote }}
            memory: {{ .Values.deployment.containers.resources.requests.memory }}
          limits:
            cpu: {{ .Values.deployment.containers.resources.limits.cpu | quote }}
            memory: {{ .Values.deployment.containers.resources.limits.memory }}
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: {{ .Values.deployment.clusterNodes }}
          - name: discovery.seed_hosts
            value: {{ .Values.deployment.serviceName | quote }}
          - name: cluster.name
            value: {{ $appname | quote }}
          - name: network.host
            value: "0.0.0.0"
          - name: cluster.deprecation_indexing.enabled
            value: "false"
          - name: ES_JAVA_OPTS
            value: "-Xmx1g -Xms1g"
          - name: node.data
            value: "true"
          - name: node.ingest
            value: "true"
          - name: node.master
            value: "true"
          - name: node.ml
            value: "true"
          - name: node.remote_cluster_client
            value: "true"
        volumeMounts:
          - name: {{ $appname | quote }}
            mountPath: /usr/share/elasticsearch/data
          - name: "elasticsearch-log"
            mountPath: /usr/share/elasticsearch/logs

      - name: elasticsearch-exporter
        image: elasticsearch-exporter:1.5.0
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 100m
            memory: 128Mi
        env:
        - name: ES_URI
          valueFrom:
            secretKeyRef:
              name: es-secret
              key: esURI
        ports:
        - containerPort: 9114

      - name: elasticsearch-logrotate
        image: logrotate-1.3:1.0.1
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "0.05"
            memory: 200Mi
          limits:
            cpu: "0.05"
            memory: 200Mi
        env:
        - name: LOGS_DIRECTORIES
          value: '/usr/share/elasticsearch/logs'
        - name: LOGROTATE_INTERVAL
          value: 'hourly'
        - name: LOGROTATE_COPIES
          value: '1'
        - name: LOGROTATE_POSTROTATE_COMMAND
          value: 'pkill -SIGUSR1 elasticsearch >/dev/null 2>&1'
        - name: LOGROTATE_SIZE
          value: 10M
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/logs/
          name: elasticsearch-log

      - name: elasticsearch-fluentd
        image: fluentd:v1.14.3-debian-1.0-0
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "0.01"
            memory: 149Mi
          limits:
            cpu: "0.1"
            memory: 149Mi
        args:
        - "-c"
        - /etc/fluentd-config/fluentd.conf
        env:
        - name: TINI_SUBREAPER
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/logs/
          name: elasticsearch-log
        - mountPath: /etc/fluentd-config/fluentd.conf
          name: config-volume
          subPath: fluentd.conf
      volumes:
      - name: elasticsearch-log
        emptyDir: {}
      - name: config-volume
        configMap:
          name: elasticsearch-fluentd-config
